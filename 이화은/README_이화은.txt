
## 개인 주제: 강아지와 기장떡 사진 분류

### 1. 배경
- 인터넷에서 강아지 사진과 유사한 물건의 사진을 쉽게 찾을 수 있음.
- 딥러닝을 사용하여 컴퓨터가 이 두 가지를 구분할 수 있는지 확인해보고자 함.

### 2. 자료 준비
- 크롬 확장자인 Fatkun Batch Download Image를 활용하여 Google, Naver, Daum에서 총 426장의 사진 다운로드.

### 3. 전처리

#### 이미지 전처리
- transforms.Compose를 이용하여 이미지 사이즈를 64x64로 조정
- 이미지를 텐서로 변환
- 이미지를 정규화

#### 폴더 경로 설정
- 학습용 및 테스트용 데이터 경로 설정
- os.path.isdir(폴더경로)를 통해 경로 확인
- ImageFolder(root=폴더경로, transform=변수명)을 이용하여 이미지를 데이터셋으로 불러옴
- .classes를 통해 하위폴더명 확인

#### 데이터 로더 생성
- 플래그 변수를 활용하여 첫 번째 이미지 저장
- 이후 이미지와 라벨 출력

#### 이미지 데이터 시각화
- 사진 색상이 밝게 나오는 문제 발생
- 문제 원인 분석:
- 정규화로 인한 것인가? X
- plt.imshow(np.transpose(img2[i], (1, 2, 0)))에서 (1, 2, 0) 순서를 변경하여도 오류 발생 또는 사진 회전 문제 발생

### 4. 모델 생성
#### CNN 모델
- 모델 구조 정의 후 초기화
- nn.Module의 초기화 메서드 호출
- 합성곱 레이어1 정의 (컬러 사진이므로 in_channels=3으로 설정)
- 합성곱 레이어2 정의
- 풀링 레이어 정의 → 최대 풀링을 사용하여 특징 맵의 크기 축소
- fully connected 레이어 정의 (10*14*14는 합성곱 레이어2의 out_channels와 첫 번째 풀링 레이어를 거친 후의 특징 맵의 크기)
- 실행 디바이스 실행
- GPU 사용 가능 여부 확인
- 최적화 인스턴스 생성 (AdamW 사용)
- Adam 대신 AdamW 사용하여 모델 변경

#### 학습 및 결과
- Epoch [100] Accuracy: 1.0 / Recall: 1.0 / Multiclass Accuracy: 1.0
- 총 확률 0.5로 저조한 결과

#### 모델 저장

### 5. 예측
- 모델 불러오기
- 테스트에 사용할 사진 확인
- 모델에 사진을 넣어 확률과 결과 확인